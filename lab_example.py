# -*- coding: utf-8 -*-
"""lab_example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/philhetzel/opan5510-class12/blob/main/lab_example.ipynb

# Lab 12 - Pivoting and unpivoting

This lab focuses on data transformation using pivoting and unpivoting operations with the polars library.

## Load your packages

You will need the `polars` package for this assignment. We'll also use `numpy` for some calculations.
"""

# Import required packages
import polars as pl

"""# Question 1: Pivot US Economic Indicator Data

## 1a. Pivot data

Load the `economics_long.csv` dataset from the `data/` folder. You'll notice that in the `economics_long` dataset's `value` column, there are different types of measurements. Transform this dataset so that the unique values for the `variable` field become columns of their own.

**Please write code below to pivot the data. The output should be a DataFrame. You must "pivot" the data to receive full credit on this question.**
"""

# Load economics_long data
economics_long= pl.read_csv("https://raw.githubusercontent.com/philhetzel/opan5510-class12/refs/heads/main/data/economics_long.csv")

#YOUR CODE HERE: Pivot the data so that each unique value in 'varibale' becomes its own column

economics_wide= economics_long.pivot(
    values="value", #The colum with numeric values
    index= "date", #rows are grouped by date
    on="variable" #unique varibale names become new columns

)

print(economics_wide.head ())

#Display the pivoted dataframe
economics_wide

"""## 1b. Calculate median unemployment for 2010-01-01 and beyond

Next, compute the median unemployment metric (as defined by `unemploy`) for 2010-01-01 and beyond.

**Please write code below. The output should show the median value. You must use the dataframe created in 1a.**
"""

# YOUR CODE HERE: Filter for dates >= '2010-01-01' and calculate median unemployment
# Hint: You'll need to filter the dataframe and then calculate the median of the 'unemploy' column

import polars as pl

# Filter for dates >= 2010-01-01 and compute median of 'unemploy'
median_unemploy = (
    economics_wide
    .filter(pl.col("date") >= "2010-01-01")
    .select(pl.col("unemploy").median())
    .item()   # extract scalar value from DataFrame
)

print(f"The median unemployment for 2010-01-01 and beyond is: {median_unemploy}")

"""### Answer: The median unemployment for 2010-01-01 and beyond is: __________

# Question 2: Air Passenger data

## 2a. Unpivot data

The `AirPassengers` dataset is wide, which makes it difficult to aggregate. Transform the `AirPassengers` dataset from wide to long. The resulting dataset should have three columns: one column representing year, one column representing month, and one column representing the number of air passengers.

**Please write code below to unpivot the data. The output should be a DataFrame. You must "unpivot" the data to receive full credit on this question.**
"""

# Load AirPassengers data
# Note: You may need to specify separator if it's not comma-separated
import polars as pl

# Load AirPassengers data (tab-separated)
air_passengers = pl.read_csv(
    "https://raw.githubusercontent.com/philhetzel/opan5510-class12/refs/heads/main/data/AirPassengers.txt",
    separator="\t"
)

# Unpivot (wide â†’ long)
air_passengers_long = air_passengers.unpivot(
    index="Year",              # keep the year column - Corrected to 'Year'
    on=air_passengers.columns[1:],  # all month columns become rows
    variable_name="month",     # name for the new "month" column
    value_name="passengers"    # name for the new "number of passengers" column
)

# Display the transformed dataframe
print(air_passengers_long.head(12))  # show one year's worth


# Display the original data structure
print("Original data shape:", air_passengers.shape)
print("\nFirst few rows:")
print(air_passengers.head())

# Display the unpivoted dataframe
air_passengers_long

"""## 2b. Find the standard deviation between 1955 and 1960

Next, compute the standard deviation of passengers between (and including) the years 1955 and 1960.

**Please write code below. The output should show the standard deviation. You must use the dataframe created in 2a.**
"""

# YOUR CODE HERE: Filter for years 1955-1960 and calculate standard deviation
# Hint: Filter the long format data for years between 1955 and 1960 (inclusive)
# Then calculate the standard deviation of the passenger values

import polars as pl

# Filter for years 1955-1960 and calculate standard deviation
std_passengers = (
    air_passengers_long
    .filter((pl.col("Year") >= 1955) & (pl.col("Year") <= 1960))
    .select(pl.col("passengers").std())
    .item()   # extract scalar value
)

print(f"The standard deviation of airline passengers between 1955 and 1960 is: {std_passengers:.2f}")

"""### The standard deviation of airline passengers between (and including) the years 1955 and 1960 is: __________

# Question 3: WHO tuberculosis case data

## 3a. Pivot data

Load the `table2.csv` dataset from the `data/` folder. This contains data for country populations and tuberculosis case metrics. You'll notice that the metrics for `cases` and `population` are in the same column (`count`). Pivot the data so that the metrics for `cases` and `population` are in their own columns.

**Please write code below to pivot the data. The output should be a DataFrame. You must "pivot" the data to receive full credit on this question.**
"""

# Load table2 data
table2 = pl.read_csv("https://raw.githubusercontent.com/philhetzel/opan5510-class12/refs/heads/main/data/table2.csv")

# Display the original data structure
print("Original data:")
print(table2)

import polars as pl

# Load table2 data
table2 = pl.read_csv(
    "https://raw.githubusercontent.com/philhetzel/opan5510-class12/refs/heads/main/data/table2.csv"
)

# Pivot the data so 'cases' and 'population' are separate columns
table2_wide = table2.pivot(
    values="count",   # values to fill the cells
    index=["country", "year"],  # columns to keep as row identifiers
    on="type"    # unique values in 'type' become new columns
)

# Display the pivoted dataframe
print(table2_wide)


# Display the pivoted dataframe
table2_wide

"""## 3b. Calculate highest cases/population ratio for 1999

Now that you have `cases` and `population` in their own columns, you can perform analysis. Create a new column in this dataset called `ratio` that divides `cases` by `population`. Next, filter the data to only include rows from the `year` of 1999. What is the country with the highest `cases`/`population` ratio?

**Please write code below. You must use the dataframe created in 3a.**
"""

# YOUR CODE HERE:
# 1. Add a 'ratio' column that calculates cases/population
# 2. Filter for year 1999
# 3. Find the country with the highest ratio

import polars as pl

# 1. Add 'ratio' column (cases / population)
table2_with_ratio = table2_wide.with_columns(
    (pl.col("cases") / pl.col("population")).alias("ratio")
)

# 2. Filter for year 1999
year_1999 = table2_with_ratio.filter(pl.col("year") == 1999)

# 3. Find the country with the highest ratio
highest_ratio_country = year_1999.sort("ratio", descending=True).select("country").row(0)[0]

# Display results
print("Data for 1999 with ratios:")
print(year_1999)
print(f"\nThe country with the highest cases/population ratio in 1999 is: {highest_ratio_country}")

"""### Answer: The country with the highest cases/population ratio in 1999 is: __________

## Submission Instructions

1. Complete all code cells above
2. Run all cells to ensure they execute without errors
3. Fill in the answer blanks with your computed values
4. Save and submit your completed notebook
"""

# YOUR CODE HERE: Filter for dates >= '2010-01-01' and calculate median unemployment
# Hint: You'll need to filter the dataframe and then calculate the median of the 'unemploy' column

median_unemploy = economics_wide.filter(pl.col("date") >= "2010-01-01").select(pl.col("unemploy")).median().item()

print(f"The median unemployment for 2010-01-01 and beyond is: {median_unemploy}")

# YOUR CODE HERE: Filter for years 1955-1960 and calculate standard deviation
# Hint: Filter the long format data for years between 1955 and 1960 (inclusive)
# Then calculate the standard deviation of the passenger values

std_passengers = air_passengers_long.filter(pl.col("Year").is_between(1955, 1960)).select(pl.col("passengers").std()).item()

print(f"The standard deviation of airline passengers between 1955 and 1960 is: {std_passengers:.2f}")

# YOUR CODE HERE:
# 1. Add a 'ratio' column that calculates cases/population
# 2. Filter for year 1999
# 3. Find the country with the highest ratio

table2_with_ratio = table2_wide.with_columns(
    (pl.col("cases") / pl.col("population")).alias("ratio")
)

# Filter for 1999 and find highest ratio
year_1999 = table2_with_ratio.filter(pl.col("year") == 1999)

# Find country with highest ratio
highest_ratio_country = year_1999.sort("ratio", descending=True).head(1).select("country").item()

print("Data for 1999 with ratios:")
print(year_1999)
print(f"\nThe country with the highest cases/population ratio in 1999 is: {highest_ratio_country}")